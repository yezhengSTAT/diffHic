
R Under development (unstable) (2015-11-22 r69685) -- "Unsuffered Consequences"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This tests the interaction counting capabilities of the marginal counter.
> 
> chromos<-c(chrA=51, chrB=31)
> source("simcounts.R")
> 
> # We set up the comparison function to check our results. 
> 
> suppressWarnings(suppressPackageStartupMessages(require(diffHic)))
> dir.create("temp-marg")
> dir1<-"temp-marg/1.h5"
> dir2<-"temp-marg/2.h5"
> 
> comp<-function(n1, n2, dist, cuts, restrict=NULL) {
+ 	simgen(dir1, n1, chromos)
+ 	simgen(dir2, n2, chromos)
+ 	param <- pairParam(fragments=cuts, restrict=restrict)
+ 	y<-squareCounts(c(dir1, dir2), param=param, width=dist, filter=1L)
+ 	frags<-marginCounts(c(dir1, dir2), param=param, width=dist)
+   
+ 	n <- length(regions(y))
+ 	ref <- matrix(0L, n, 2)
+ 	for (x in 1:nrow(y)) {
+ 		a<-anchors(y, id=TRUE, type="first")[x]
+ 		t<-anchors(y, id=TRUE, type="second")[x]
+ 		ref[a,]<-ref[a,]+ assay(y)[x,]
+ 		ref[t,]<-ref[t,] + assay(y)[x,] 
+ 	}
+ 
+     out <- assay(frags)
+     dimnames(out) <- NULL 
+ 	if (!identical(ref, out)) { stop("mismatches in counts") }
+ 	if (!identical(frags$totals, y$totals) || !identical(as.integer(colSums(assay(frags))), frags$totals*2L)) { 
+ 		stop("mismatches in total counts") }
+ 	if (!identical(regions(y), rowRanges(frags)))  { stop("mismatches in final regions") }
+ 	return(head(assay(frags)))
+ }
> 
> ###################################################################################################
> # Checking a vanilla count.
> 
> set.seed(126857)
> comp(20, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    9    5
[2,]   11    5
[3,]   10    3
[4,]    8    3
[5,]    7    8
[6,]   11    5
> comp(20, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   14    4
[2,]   10    6
[3,]    8    3
[4,]    7    5
[5,]    8    8
[6,]   10    4
> comp(20, 10, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    6    7
[2,]   15    7
[3,]    9    7
[4,]   10    2
[5,]   13    4
[6,]    7    3
> comp(20, 10, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    8    4
[2,]   11    3
[3,]    9    5
[4,]    4    2
[5,]    3    1
[6,]    4    3
> comp(20, 10, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    8    1
[2,]    1    1
[3,]    7    1
[4,]    5    4
[5,]    3    3
[6,]    8    3
> 
> # Repeating a couple of times.
> comp(10, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    4    1
[2,]    6    6
[3,]    4    3
[4,]    7   10
[5,]    6    6
[6,]    3    4
> comp(10, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    3    4
[2,]    7    8
[3,]    5    5
[4,]    4    3
[5,]    6    8
[6,]    5    2
> comp(10, 10, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    8    7
[2,]    3    6
[3,]    3    1
[4,]    2    6
[5,]    8    5
[6,]    3    5
> comp(10, 10, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    1    2
[2,]    4    4
[3,]    1    4
[4,]    3    2
[5,]    2    1
[6,]    5    0
> comp(10, 10, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    2    1
[2,]    4    1
[3,]    1    3
[4,]    3    1
[5,]    3    0
[6,]    1    5
> 
> comp(10, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    3   16
[2,]    8    7
[3,]    5    7
[4,]    7    7
[5,]    2   13
[6,]    2    6
> comp(10, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    7    8
[2,]    6    3
[3,]    9   13
[4,]    3   10
[5,]    2   12
[6,]    3   14
> comp(10, 20, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    6    9
[2,]    3   15
[3,]    4   11
[4,]    8   13
[5,]    4    6
[6,]    5    6
> comp(10, 20, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    1    5
[2,]    2    4
[3,]    3    5
[4,]    2    2
[5,]    5    6
[6,]    1    5
> comp(10, 20, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    6    1
[2,]    0    5
[3,]    1    7
[4,]    3    2
[5,]    2    2
[6,]    4    6
> 
> ###################################################################################################
> # Another example, a bit more extreme with more overlaps.
> 
> comp(50, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   20    8
[2,]   20    9
[3,]   27    6
[4,]   23   15
[5,]   25   12
[6,]   20    9
> comp(50, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   28   18
[2,]   21    8
[3,]   37   17
[4,]   28    8
[5,]   17    4
[6,]   19    5
> comp(50, 20, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   26    7
[2,]   27    7
[3,]   21   10
[4,]   30   13
[5,]   21   11
[6,]   22   10
> comp(50, 20, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   16    6
[2,]    7    3
[3,]   11    4
[4,]    8    4
[5,]   12    3
[6,]   17    4
> comp(50, 20, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   16    3
[2,]   14    4
[3,]   19    4
[4,]   13    8
[5,]   10    9
[6,]   24    4
> 
> comp(30, 30, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   12   13
[2,]   15   16
[3,]   21   13
[4,]   11   10
[5,]   15   11
[6,]   15   18
> comp(30, 30, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   11   15
[2,]   16   17
[3,]   12   11
[4,]   10   13
[5,]   21   11
[6,]   14   14
> comp(30, 30, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   23    6
[2,]   14   12
[3,]   16   18
[4,]   12   15
[5,]   12   23
[6,]   13   15
> comp(30, 30, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    7   13
[2,]    6    4
[3,]    4    6
[4,]   13    6
[5,]    2    4
[6,]   11    7
> comp(30, 30, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   12    5
[2,]    5    5
[3,]    9    8
[4,]    5    5
[5,]    5    8
[6,]    5    7
> 
> ###################################################################################################
> # Another example which is the pinnacle of extremity.
> 
> comp(200, 100, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   83   55
[2,]  107   54
[3,]  139   56
[4,]   73   42
[5,]   75   37
[6,]  113   51
> comp(200, 100, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   83   52
[2,]   83   42
[3,]  116   64
[4,]   97   35
[5,]   91   36
[6,]   91   50
> comp(200, 100, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]  138   65
[2,]   78   49
[3,]   66   27
[4,]  102   48
[5,]   81   39
[6,]  115   55
> comp(200, 100, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   75   20
[2,]   35   15
[3,]   35   11
[4,]   73   23
[5,]   47   29
[6,]   38   16
> comp(200, 100, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   51   22
[2,]   32   28
[3,]   60   29
[4,]   44   24
[5,]   56   26
[6,]   40   21
> 
> comp(50, 200, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   22   88
[2,]   25  108
[3,]   31   96
[4,]   20   95
[5,]   26  100
[6,]   16   97
> comp(50, 200, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   16   75
[2,]   29   99
[3,]   32   82
[4,]   25  124
[5,]   23  105
[6,]   21   87
> comp(50, 200, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   20   94
[2,]   33   92
[3,]   26  113
[4,]   26   86
[5,]   18   79
[6,]   22  110
> comp(50, 200, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    6   58
[2,]   16   69
[3,]   10   42
[4,]   10   37
[5,]   18   48
[6,]   12   39
> comp(50, 200, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   12   40
[2,]   20   76
[3,]   10   50
[4,]   21   53
[5,]   12   58
[6,]   12   35
> 
> ###################################################################################################
> # Adding some restriction.
> 
> comp(20, 10, dist=10000, cuts=simcuts(chromos), restrict="chrA")
     [,1] [,2]
[1,]    8    4
[2,]    8    4
[3,]    4    3
[4,]    6    5
[5,]    8    2
[6,]    6    2
> comp(20, 10, dist=10000, cuts=simcuts(chromos), restrict="chrB")
     [,1] [,2]
[1,]    0    0
[2,]    0    0
[3,]    0    0
[4,]    0    0
[5,]    0    0
[6,]    0    0
> comp(20, 10, dist=10000, cuts=simcuts(chromos, overlap=4), restrict="chrA")
     [,1] [,2]
[1,]    6    4
[2,]    8    6
[3,]    6    2
[4,]    7    3
[5,]    7    2
[6,]    6    3
> comp(20, 10, dist=5000, cuts=simcuts(chromos), restrict="chrB")
     [,1] [,2]
[1,]    0    0
[2,]    0    0
[3,]    0    0
[4,]    0    0
[5,]    0    0
[6,]    0    0
> 
> ##################################################################################################
> # Cleaning up.
> 
> unlink("temp-marg", recursive=TRUE)
> 
> ##################################################################################################
> # End.
> 
> 
> proc.time()
   user  system elapsed 
 16.898   0.425  17.337 
