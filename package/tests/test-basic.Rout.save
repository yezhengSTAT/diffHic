
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # These are just placeholders for the real things in inst/tests.
> 
> suppressWarnings(suppressPackageStartupMessages(require(diffHic)))
> 
> hic.file <- system.file("exdata", "hic_sort.bam", package="diffHic")
> cuts <- readRDS(system.file("exdata", "cuts.rds", package="diffHic"))
> param <- pairParam(fragments=cuts)
> 
> # Setting up the parameters
> fout <- "output.h5"
> preparePairs(hic.file, param, file=fout)
$pairs
   total   marked filtered   mapped 
      30        7        3       20 

$same.id
   dangling self.circle 
          2           1 

$singles
[1] 2

$chimeras
  total  mapped   multi invalid 
     12       8       7       5 

> head(getPairData(fout, param))
  length orientation insert
1     40           1     40
2     80           1     80
3     60           2     54
4     40           3    160
5     20           1     66
6     80           0    114
> 
> loadChromos(fout)
  anchors targets
1    chrA    chrA
2    chrB    chrA
3    chrB    chrB
> head(loadData(fout, "chrA", "chrA"))
  anchor.id target.id anchor.pos target.pos anchor.len target.len
1         2         1         49         14         -5         10
2         2         1         79          9        -10         10
3         2         1         65         21         10        -10
4         4         1        156          6        -10        -10
5         4         2        141         80         -5         10
6         4         2        154         50         10         10
> head(loadData(fout, "chrA", "chrB"))
  anchor.id target.id anchor.pos target.pos anchor.len target.len
1         5         2         19         44         10        -10
2         5         3         14        105         10        -10
3         6         1         65         19          5         10
4         6         2         24         90         -5          5
5         6         3         24        100         -5        -10
6         6         3         24         95         -5        -10
Warning message:
In value[[3L]](cond) : anchor and target definitions are reversed
> 
> # Loading the counts.
> data <- squareCounts(fout, param, width=50, filter=1)
> data
DIList object for 1 library with 10 pairs across 6 regions
> 
> margins <- marginCounts(fout, param, width=50)
> margins
DIList object for 1 library with 6 pairs across 6 regions
> totalCounts(fout, param)
[1] 17
> 
> regions <- GRanges("chrA", IRanges(c(1, 100, 150), c(20, 140, 160)))
> connectCounts(fout, param, regions=regions, filter=1L)
DIList object for 1 library with 2 pairs across 3 regions
> 
> # Checking some values.
> head(getArea(data))
[1] 2208 2304 2208 2208 3312 3174
> head(getDistance(data))
[1]  47 140  93  47  NA  NA
> 
> anchors(data)
GRanges object with 10 ranges and 1 metadata column:
       seqnames     ranges strand |    nfrags
          <Rle>  <IRanges>  <Rle> | <integer>
   [1]     chrA [ 49,  94]      * |         1
   [2]     chrA [141, 188]      * |         1
   [3]     chrA [141, 188]      * |         1
   [4]     chrA [141, 188]      * |         1
   [5]     chrB [  1,  69]      * |         2
   [6]     chrB [  1,  69]      * |         2
   [7]     chrB [  1,  69]      * |         2
   [8]     chrB [  1,  69]      * |         2
   [9]     chrB [ 70,  92]      * |         1
  [10]     chrB [ 70,  92]      * |         1
  -------
  seqinfo: 2 sequences from an unspecified genome
> targets(data)
GRanges object with 10 ranges and 1 metadata column:
       seqnames    ranges strand |    nfrags
          <Rle> <IRanges>  <Rle> | <integer>
   [1]     chrA [ 1,  48]      * |         1
   [2]     chrA [ 1,  48]      * |         1
   [3]     chrA [49,  94]      * |         1
   [4]     chrA [95, 140]      * |         1
   [5]     chrA [ 1,  48]      * |         1
   [6]     chrA [49,  94]      * |         1
   [7]     chrA [95, 140]      * |         1
   [8]     chrB [ 1,  69]      * |         2
   [9]     chrB [ 1,  69]      * |         2
  [10]     chrB [70,  92]      * |         1
  -------
  seqinfo: 2 sequences from an unspecified genome
> counts(data)
      [,1]
 [1,]    3
 [2,]    1
 [3,]    2
 [4,]    1
 [5,]    1
 [6,]    2
 [7,]    3
 [8,]    1
 [9,]    2
[10,]    1
> regions(data)
GRanges object with 6 ranges and 1 metadata column:
      seqnames     ranges strand |    nfrags
         <Rle>  <IRanges>  <Rle> | <integer>
  [1]     chrA [  1,  48]      * |         1
  [2]     chrA [ 49,  94]      * |         1
  [3]     chrA [ 95, 140]      * |         1
  [4]     chrA [141, 188]      * |         1
  [5]     chrB [  1,  69]      * |         2
  [6]     chrB [ 70,  92]      * |         1
  -------
  seqinfo: 2 sequences from an unspecified genome
> 
> data$totals
[1] 17
> colData(data)
DataFrame with 1 row and 1 column
     totals
  <integer>
1        17
> exptData(data)
List of length 2
names(2): param width
> 
> asDGEList(data)
An object of class "DGEList"
$counts
   Sample1
1        3
2        1
3        2
4        1
5        1
6        2
7        3
8        1
9        2
10       1

$samples
        group lib.size norm.factors
Sample1     1       17            1

> asDGEList(data, lib.size=20)$samples
        group lib.size norm.factors
Sample1     1       20            1
> asDGEList(data, norm.factors=2, group="a")$samples
        group lib.size norm.factors
Sample1     a       17            2
> 
> # Simple normalization with dummy data.
> set.seed(3423746)
> npts <- 100
> npairs <- 5000
> nlibs <- 4
> anchors <- sample(npts, npairs, replace=TRUE)
> targets <- sample(npts, npairs, replace=TRUE)
> dummy <- DIList(counts=matrix(rpois(npairs*nlibs, runif(npairs, 10, 100)), nrow=npairs),
+     totals=runif(nlibs, 1e6, 2e6), anchors=pmax(anchors, targets), targets=pmin(anchors, targets),
+     regions=GRanges("chrA", IRanges(1:npts, 1:npts)))
> 
> normOffsets(dummy)
[1] 1.0797832 0.8315380 0.9929251 1.1216694
> normOffsets(dummy, logratio=0)
[1] 1.0811624 0.8302083 0.9910453 1.1241609
> normOffsets(dummy, lib.sizes=c(10, 20, 15, 25))
[1] 1.6546731 0.8295975 1.1041603 0.6597634
> head(normOffsets(dummy, type="loess"))
             [,1]          [,2]         [,3]         [,4]
[1,] -0.001441205  0.0009288939  0.004926866 -0.004414554
[2,]  0.005400644  0.0041595563 -0.006896160 -0.002664040
[3,]  0.003115173 -0.0016344141  0.001783304 -0.003264063
[4,]  0.005334707  0.0035367045 -0.005104467 -0.003766944
[5,] -0.003505621  0.0163064678 -0.001889799 -0.010911049
[6,]  0.004070284  0.0090487766 -0.008279824 -0.004839236
> head(normOffsets(dummy, type="loess", span=0.5))
              [,1]          [,2]         [,3]          [,4]
[1,] -0.0024209796  0.0006743125  0.003720243 -0.0019735760
[2,]  0.0063348114  0.0041435478 -0.006281532 -0.0041968270
[3,] -0.0009160649 -0.0004010364  0.002050126 -0.0007330249
[4,]  0.0067668245  0.0036523894 -0.005981150 -0.0044380642
[5,] -0.0016877752  0.0152247089 -0.006733300 -0.0068036332
[6,]  0.0031066340  0.0085339739 -0.006865168 -0.0047754397
> 
> # Playing around with some bin counts.
> stuff <- correctedContact(data)
> head(stuff$truth)
[1] 1.517032e+04 6.123523e-01 6.123523e-01 8.162749e-01 2.041633e-01
[6] 2.041633e-01
> 
> data.large <- squareCounts(fout, param, width=100, filter=1)
> boxed <- boxPairs(larger=data.large, smaller=data)
> head(boxed$indices$larger)
[1] 1 2 3 4 5 6
> head(boxed$indices$smaller)
[1] 1 2 2 3 4 4
> 
> head(enrichedPairs(data))
[1]  1.0324215  0.0000000  0.5849625  0.0000000 -0.2895066  0.2630344
> head(clusterPairs(data, tol=10)$indices[[1]])
[1] 1 2 2 2 3 3
> 
> # End.
> 
> unlink(fout)
> 
> proc.time()
   user  system elapsed 
 15.676   0.682  16.646 
