\name{countNeighbors}
\alias{countNeighbors}

\title{Get counts for neighbouring interactions}
\description{Counts the number of read pairs for adjacent bin pairs in the interaction space.}

\usage{
countNeighbors(data, flank, type=c("both", "anchor", "target"))
}

\arguments{
    \item{data}{a \code{DIList} object produced by \code{\link{squareCounts}}}
	\item{flank}{an integer scalar, specifying the maximum distance at which bin pairs are considered neighbors}
	\item{type}{character string indicating the type of neighbors to consider}
}

\value{
A list containing:
\item{counts}{an integer matrix for each bin pair in \code{data}, containing the sum of counts for the neighboring bin pairs}
\item{n}{a numeric vector for each bin pair, specifying the number of bin pairs in each neighbourhood}
}

\details{
For any bin pair with anchor/target indices \code{x} and \code{y}, another bin pair is considered to be a neighbor if it has the same \code{x} and a target index in \code{[y-flank, y+flank]} if \code{type="target"}; the same \code{y} and an anchor index in \code{[x-flank, x+flank]} if \code{type="anchor"}; or either of the two, if \code{type="both"}. 
The last will mean that counts are collected over a cross shape in the interaction space.

For each central bin pair, read pair counts are summed over all the neighboring bin pairs (with the exception of the central bin pair itself, of course). 
This can be used as an estimate of the level of ``background'' ligation, e.g., to call peaks in the interaction space. 
Of course, the area of the neighbourhood will not be the same as that of the central bin pair.
Abundances should be normalized to equalize the areas prior to performing comparisons.

The \code{data} object should be generated by taking the output of \code{\link{squareCounts}} with \code{filter=1}. 
Prior filtering should not be performed as low-abundance bin pairs are informative neighbours.
}

\seealso{
\code{\link{squareCounts}}
}

\author{Aaron Lun}

\examples{
hic.file <- system.file("exdata", "hic_sort.bam", package="diffHic")
cuts <- readRDS(system.file("exdata", "cuts.rds", package="diffHic"))
param <- pairParam(cuts)

# Setting up the parameters
fout <- "output"
invisible(preparePairs(hic.file, param, fout))
data <- squareCounts(fout, param, width=50, filter=1L)

# Collating neighbor counts.
surrounds <- countNeighbors(data, flank=1, type="both")
surrounds
countNeighbors(data, flank=2, type="anchor")
countNeighbors(data, flank=1, type="target")
}
