
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This tests the neighbor-counting code.
> 
> suppressWarnings(suppressPackageStartupMessages(require(diffHic)))
> suppressPackageStartupMessages(require(edgeR))
> 
> .getLimits <- function(x, flank, start, end) {
+ 	lower.x <- x - flank
+ 	upper.x <- x + flank
+ 	if (lower.x < start) { upper.x <- upper.x + start - lower.x }
+ 	if (upper.x > end) { lower.x <- lower.x + end - upper.x }
+ 	lower.x <- max(start, lower.x)
+ 	upper.x <- min(upper.x, end)
+ 	return(c(lower.x, upper.x))
+ }
> 
> # Defining some odds and ends.
> 
> lower.left <- function(x) { 
+ 	out <- matrix(TRUE, nrow=nrow(x), ncol=ncol(x))
+ 	out[nrow(x),1] <- FALSE
+ 	out
+ }
> upper.right <- function(x) { 
+ 	out <- matrix(TRUE, nrow=nrow(x), ncol=ncol(x))
+ 	out[1, ncol(x)] <- FALSE
+ 	out
+ }
> upper.left <- function(x) { 
+ 	out <- matrix(TRUE, nrow=nrow(x), ncol=ncol(x))
+ 	out[1,1] <- FALSE
+ 	out	
+ }
> lower.right <- function(x) { 
+ 	out <- matrix(TRUE, nrow=nrow(x), ncol=ncol(x))
+ 	out[nrow(x), ncol(x)] <- FALSE
+ 	out
+ }
> all.but.middle <- function(x) {
+ 	out <- matrix(TRUE, nrow=nrow(x), ncol=ncol(x))
+ 	out[ceiling(length(out)/2)] <- FALSE
+ 	out
+ }
> 
> comp <- function(npairs, chromos, flanking, prior=2) {
+ 	flanking <- as.integer(flanking)
+ 
+ 	nlibs <- 4L
+ 	lambda <- 5
+ 	nbins <- sum(chromos)
+ 	all.pairs <- rbind(t(combn(nbins, 2)), cbind(1:nbins, 1:nbins))
+ 	aid <- pmax(all.pairs[,1], all.pairs[,2])
+ 	tid <- pmin(all.pairs[,1], all.pairs[,2])
+    	npairs <- min(npairs, nrow(all.pairs))
+ 
+ 	# Setting up some data.
+ 	counts <- do.call(cbind, lapply(1:nlibs, FUN=function(x) { as.integer(rpois(npairs, lambda) + 1) }) )
+ 	chosen <- sample(nrow(all.pairs), npairs)
+ 	indices <- unlist(sapply(chromos, FUN=function(x) { 1:x }), use.names=FALSE)
+ 	data <- DIList(counts=counts, anchors=aid[chosen], targets=tid[chosen],
+ 		totals=rep(1e6, nlibs), regions=GRanges(rep(names(chromos), chromos), IRanges(indices, indices)))
+ 	data@region$nfrags <- rep(1:3, length.out=nbins)
+ 	
+ 	# Computing the reference enrichment value.
+ 	bg <- enrichedGap(data, flank=flanking, trend="none", prior.count=prior)
+ 	final.ref <- numeric(length(bg))
+ 
+ 	# Sorting them by chromosome pairs.
+ 	all.chrs <- as.character(seqnames(regions(data)))
+ 	chr.pair <- paste0(all.chrs[data@anchor.id], ".", all.chrs[data@target.id])
+ 	by.chr.pair <- split(1:npairs, chr.pair)
+ 	first.id <- lapply(split(1:nbins, all.chrs), FUN=min)
+ 
+ 	for (cpair in names(by.chr.pair)) { 
+ 		cur.pairs <- by.chr.pair[[cpair]]
+ 		two.chrs <- strsplit(cpair, "\\.")[[1]]
+ 		current <- data[cur.pairs,]
+ 		rel.ab <- 2^(aveLogCPM(counts(current), lib.size=totals(current), prior.count=0) 
+ 			+ log2(mean(totals(current))/1e6))
+ 
+ 		# Setting up the interaction space.
+ 		a.dex <- anchors(current, id=TRUE) - first.id[[two.chrs[1]]] + 1L
+ 		t.dex <- targets(current, id=TRUE) - first.id[[two.chrs[2]]] + 1L
+ 		alen <- chromos[[two.chrs[1]]]
+ 		tlen <- chromos[[two.chrs[2]]]
+ 		inter.space <- matrix(0L, nrow=alen, ncol=tlen)
+ 		inter.space[(t.dex-1)*alen + a.dex] <- 1:nrow(current) # column major.
+ 		valid <- matrix(TRUE, nrow=alen, ncol=tlen)
+ 		if (two.chrs[1]==two.chrs[2]) { valid[upper.tri(valid)] <- FALSE }
+ 
+ 		output <- numeric(nrow(current))
+ 		for (pair in 1:nrow(current)) {
+ 			collected <- numeric(6)
+ 			ax <- a.dex[pair]
+ 			tx <- t.dex[pair]
+ 
+ 			for (quad in 1:6) { 
+ 				if (quad==1L) {
+ 					cur.a <- ax + 0:flanking
+ 					cur.t <- tx + 0:flanking
+ 					keep <- upper.left
+ 				} else if (quad==2L) {
+ 					cur.a <- ax - flanking:0
+ 					cur.t <- tx + 0:flanking
+ 					keep <- lower.left
+ 				} else if (quad==3L) { 
+ 					cur.a <- ax + 0:flanking
+ 					cur.t <- tx - flanking:0
+ 					keep <- upper.right 
+ 				} else if (quad==4L) {
+ 					cur.a <- ax - flanking:0
+ 					cur.t <- tx - flanking:0
+ 					keep <- lower.right
+ 				} else if (quad==5L) {
+ 					cur.a <- ax + (-flanking):flanking
+ 					cur.t <- tx
+ 					keep <- all.but.middle
+ 				} else if (quad==6L) {
+ 					cur.a <- ax
+ 					cur.t <- tx + (-flanking):flanking
+ 					keep <- all.but.middle
+ 				} 
+ 	
+ 				# Selecting the relevant entries for the chosen quadrant.
+ 				indices <- outer(cur.a, cur.t, FUN=function(x, y) { 
+ 					out <- (y-1)*alen + x
+ 					out[x > alen | x < 1 | y > tlen | y < 1] <- -1
+ 					return(out)
+ 				})
+ 				indices <- indices[keep(indices)]
+ 				indices <- indices[indices > 0]
+ 				indices <- indices[valid[indices]]
+ 
+ 				# Computing the average across this quadrant.
+ 				relevant.rows <- inter.space[indices]
+ 				is.zero <- relevant.rows==0L			
+ 				collected[quad] <- sum(rel.ab[relevant.rows[!is.zero]])/length(relevant.rows)
+ 			}
+ #			print(sprintf("%i %i %.3f", ax, tx, collected[6]))
+ 		
+ 			output[pair] <- log2((rel.ab[pair]+prior)/(max(collected, na.rm=TRUE)+prior))
+ 		}
+ 		final.ref[cur.pairs] <- output
+ 	}
+ 
+ 	if (any(abs(bg-final.ref) > (0.001+abs(bg))*1e-6)) { stop("mismatch in relative enrichment values") }
+ 	return(head(bg))
+ }
> 
> ###################################################################################################
> # Simulating.
> 
> set.seed(3427675)
> comp(10, c(chrA=10), 5)
[1] 0.7155466 0.8838070 0.5219527 1.1037479 0.9411063 0.9475326
> comp(100, c(chrA=10, chrB=30, chrC=20), 5)
[1] 1.494109 1.431157 1.768536 1.393481 1.354957 1.964896
> comp(100, c(chrA=10, chrC=20), 5)
[1] 0.7324501 0.7058169 1.4793651 1.2334901 0.8624965 0.5849625
> comp(100, c(chrA=10, chrB=5, chrC=20), 5)
[1]  0.8845228  1.2531189  1.2334901  0.7041757  0.9429691 -0.6026645
> comp(100, c(chrA=20, chrB=5), 5)
[1] 1.2527661 0.9315203 0.0000000 0.8780095 0.4918531 0.6951454
> 
> comp(100, c(chrA=10, chrB=30, chrC=20), 10)
[1] 1.522678 1.685010 1.682091 1.327488 1.797227 1.375509
> comp(100, c(chrA=10, chrC=20), 10)
[1] 0.1666499 1.4932463 0.9198297 1.2879808 1.0223678 0.9434165
> comp(100, c(chrA=10, chrB=5, chrC=20), 10)
[1] 1.6424480 1.5025003 1.3770696 0.6611981 1.1089344 1.0391706
> comp(100, c(chrA=20, chrB=10), 10)
[1]  0.3468028  1.3964990  1.7138125 -0.1663584  0.8091777  1.1527703
> 
> comp(200, c(chrA=10, chrB=30, chrC=20), 3)
[1] 1.497500 1.687532 1.584963 1.237039 1.396696 1.509014
> comp(200, c(chrA=10, chrC=20), 3)
[1] -0.08285693  0.89600228 -0.35147237  0.15002544  0.63558857  0.36994961
> comp(200, c(chrA=10, chrB=5, chrC=20), 3)
[1] 0.70974413 0.81942775 0.25276607 0.54780950 0.08246216 1.04439412
> comp(200, c(chrA=20, chrB=3), 3)
[1]  0.04090794 -0.17508671 -0.06413034  0.55101517  0.16889487 -0.16349873
> 
> comp(200, c(chrA=10, chrB=30, chrC=20), 1)
[1]  1.8579810  2.1699250 -0.3312059  0.6109577  1.1375035  0.5849625
> comp(200, c(chrA=10, chrC=20), 1)
[1]  0.2552571  0.3439544  0.7325197 -0.2223924  0.5584903 -0.1876270
> comp(200, c(chrA=10, chrB=5, chrC=20), 1)
[1] -0.1255309 -0.8930848  0.1420190  1.2879808  0.5849625  0.4306344
> comp(200, c(chrA=20, chrB=5), 1)
[1] -0.2941831 -0.4964258 -0.1069152 -0.1089344 -0.3656495  0.4995710
> 
> ###################################################################################################
> 
> 
> proc.time()
   user  system elapsed 
 12.021   0.161  12.183 
