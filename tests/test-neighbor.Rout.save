
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This tests the neighbor-counting code.
> 
> suppressPackageStartupMessages(require(diffHic))
> 
> comp <- function(npairs, chromos, flanking) {
+ 	flanking <- as.integer(flanking)
+ 	nlibs <- 4L
+ 	lambda <- 5
+ 	nbins <- sum(chromos)
+     all.pairs <- rbind(t(combn(nbins, 2)), cbind(1:nbins, 1:nbins))
+ 	all.pairs <- data.frame(anchor.id=all.pairs[,2], target.id=all.pairs[,1])       
+    	npairs <- min(npairs, nrow(all.pairs))
+ 
+ 	# Setting up some data.
+ 	counts <- do.call(cbind, lapply(1:nlibs, FUN=function(x) { as.integer(rpois(npairs, lambda) + 1) }) )
+ 	data <- list(counts=counts, pairs=all.pairs[sample(nrow(all.pairs), npairs),,drop=FALSE], 
+ 		totals=rep(1, nlibs), region=GRanges(rep(names(chromos), chromos), IRanges(1:nbins, 1:nbins)))
+ 	data$region$nfrags <- rep(1:3, length.out=nbins)
+ 	all.chrs <- as.character(seqnames(data$region))
+     last.id <- lapply(split(1:nbins, all.chrs), FUN=max)
+     first.id <- lapply(split(1:nbins, all.chrs), FUN=min)
+ 
+ 	# Going through every pair of chromosomes.
+ 	out.a <- out.t <- matrix(0, nrow=npairs, ncol=nlibs)
+ 	n.a <- n.t <- integer(npairs)
+ 	for (i in 1:npairs) {
+ 		current.a <- data$pairs$anchor.id[i]
+ 		current.t <- data$pairs$target.id[i]
+ 		upper.a <- pmin(current.a + flanking, last.id[[all.chrs[current.a]]]) 
+ 		lower.a <- pmax(current.a - flanking, first.id[[all.chrs[current.a]]])
+ 		upper.t <- pmin(current.t + flanking, last.id[[all.chrs[current.t]]])
+ 		lower.t <- pmax(current.t - flanking, first.id[[all.chrs[current.t]]])
+ 		
+ 		keep.a <- (data$pairs$target.id==current.t & data$pairs$anchor.id >= lower.a & data$pairs$anchor.id <= upper.a) |
+                   (data$pairs$anchor.id==current.t & data$pairs$target.id >= lower.a & data$pairs$target.id <= upper.a)
+ 		keep.t <- (data$pairs$anchor.id==current.a & data$pairs$target.id >= lower.t & data$pairs$target.id <= upper.t) | 
+ 		 		  (data$pairs$target.id==current.a & data$pairs$anchor.id >= lower.t & data$pairs$anchor.id <= upper.t)
+ 
+ 		out.a[i,] <- colSums(counts[keep.a,,drop=FALSE])
+ 		out.t[i,] <- colSums(counts[keep.t,,drop=FALSE])
+ 		out.a[i,] <- out.a[i,] - data$counts[i,]
+ 		out.t[i,] <- out.t[i,] - data$counts[i,]
+ 		n.a[i] <- upper.a - lower.a
+ 		n.t[i] <- upper.t - lower.t
+ 	}
+ 
+ 	# Converting to integer.
+ 	storage.mode(out.a) <- storage.mode(out.t) <- "integer"
+ 	o <- order(data$pairs$anchor.id, data$pairs$target.id)
+ 	equator <- function(x, y) { length(x)==length(y) && all(abs(x-y) < 1e-8*x) }
+ 
+ 	# Checking it over.
+ 	a.counts <- countNeighbors(data, flank=flanking, type="anchor")
+ 	t.counts <- countNeighbors(data, flank=flanking, type="target")
+ 	if (!identical(a.counts$counts, out.a)) { stop("mismatch in counts for anchor background") }
+ 	if (!equator(a.counts$n, n.a)) { stop("mismatch in bin pair numbers for anchor background") }
+ 	if (!identical(t.counts$counts, out.t)) { stop("mismatch in counts for target background") }
+ 	if (!equator(t.counts$n, n.t)) { stop("mismatch in bin pair numbers for target background") }
+ 
+ 	b.counts <- countNeighbors(data, flank=flanking, type="both")
+ 	ref.combo <- out.a + out.t
+ 	on.diag <- data$pairs$anchor.id==data$pairs$target.id
+ 	ref.combo[on.diag,] <- ref.combo[on.diag,]/2L
+ 	if (!identical(b.counts$counts, ref.combo)) { stop("mismatch in counts for combined anchor/target background") }
+ 	ref.n <- n.t + n.a
+ 	ref.n[on.diag] <- ref.n[on.diag]/2
+ 	if (!equator(b.counts$n, ref.n)) { stop("mismatch in bin pair numbers for combined anchor/target background") }
+ 
+ 	return(head(b.counts$counts))
+ }
> 
> ###################################################################################################
> # Simulating.
> 
> set.seed(3427675)
> comp(100, c(chrA=10, chrB=30, chrC=20), 5)
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0
[5,]    0    0    0    0
[6,]    6    4    5    7
> comp(100, c(chrA=10, chrC=20), 5)
     [,1] [,2] [,3] [,4]
[1,]   38   44   40   39
[2,]   12   12   11    9
[3,]    6    7    6    4
[4,]   30   50   40   34
[5,]    7    6    4    3
[6,]   33   40   42   33
> comp(100, c(chrA=10, chrB=5, chrC=20), 5)
     [,1] [,2] [,3] [,4]
[1,]   19    8   13    7
[2,]   16   16   24   21
[3,]    7   12   15    7
[4,]   14   13   14   12
[5,]   11   15   10   13
[6,]   19   21   18   14
> comp(100, c(chrA=20, chrB=5), 5)
     [,1] [,2] [,3] [,4]
[1,]   14   12   17   11
[2,]   25   26   36   32
[3,]    0    0    0    0
[4,]   34   44   45   46
[5,]   31   39   31   37
[6,]   19   28   21   28
> 
> comp(100, c(chrA=10, chrB=30, chrC=20), 10)
     [,1] [,2] [,3] [,4]
[1,]   11    8   11   12
[2,]    9   11   15   10
[3,]    8    6    5    4
[4,]    6    7    7    8
[5,]    0    0    0    0
[6,]    5    6    4    7
> comp(100, c(chrA=10, chrC=20), 10)
     [,1] [,2] [,3] [,4]
[1,]   33   34   40   38
[2,]   34   56   50   37
[3,]   20   22   17   15
[4,]   23   38   30   29
[5,]   24   19   22   23
[6,]   48   47   42   43
> comp(100, c(chrA=10, chrB=5, chrC=20), 10)
     [,1] [,2] [,3] [,4]
[1,]   42   36   33   39
[2,]   11    9   16   10
[3,]   32   33   38   31
[4,]   18   17   19   12
[5,]   32   30   31   40
[6,]    8    5    4    6
> comp(100, c(chrA=20, chrB=10), 10)
     [,1] [,2] [,3] [,4]
[1,]   42   41   44   41
[2,]   58   62   55   38
[3,]    0    0    0    0
[4,]   32   33   28   24
[5,]   16   17   16   18
[6,]   35   33   39   23
> 
> comp(200, c(chrA=10, chrB=30, chrC=20), 3)
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    4    9    7    6
[3,]    7   11   10    5
[4,]   27   26   20   20
[5,]   17   18   14   12
[6,]    7    3    3    6
> comp(200, c(chrA=10, chrC=20), 3)
     [,1] [,2] [,3] [,4]
[1,]   26   23   21   33
[2,]   36   46   44   52
[3,]   12   21   15   17
[4,]   26   23   19   19
[5,]   22   25   33   25
[6,]   26   37   32   37
> comp(200, c(chrA=10, chrB=5, chrC=20), 3)
     [,1] [,2] [,3] [,4]
[1,]   13   16   14   22
[2,]   38   38   28   43
[3,]   19   10    8   10
[4,]   13    9   29   22
[5,]   10   11   15   13
[6,]   28   17   18   15
> comp(200, c(chrA=20, chrB=3), 3)
     [,1] [,2] [,3] [,4]
[1,]   20   16   13   15
[2,]   41   38   56   40
[3,]   27   46   40   30
[4,]    7   17   12   13
[5,]   43   42   49   46
[6,]   51   35   50   44
> 
> comp(200, c(chrA=10, chrB=30, chrC=20), 1)
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    8    9    6    6
[4,]    4    5    6    5
[5,]    6    8    6    3
[6,]    0    0    0    0
> comp(200, c(chrA=10, chrC=20), 1)
     [,1] [,2] [,3] [,4]
[1,]   17   10   12    9
[2,]    4    7    6    4
[3,]   27   31   28   19
[4,]   10    9    6    9
[5,]    7   15   13   12
[6,]    0    0    0    0
> comp(200, c(chrA=10, chrB=5, chrC=20), 1)
     [,1] [,2] [,3] [,4]
[1,]    5    4    7    8
[2,]   18   12   13    6
[3,]   18   17   21   21
[4,]    7    5    7    3
[5,]    7    5    4    5
[6,]   19   16   19   17
> comp(200, c(chrA=20, chrB=5), 1)
     [,1] [,2] [,3] [,4]
[1,]   12   12    8   10
[2,]   24   14   24   17
[3,]   10   11   10    9
[4,]    7   12    8   12
[5,]   12    9   11   11
[6,]    9   10   10    5
> 
> ###################################################################################################
> 
> 
> proc.time()
   user  system elapsed 
  9.560   0.071   9.631 
