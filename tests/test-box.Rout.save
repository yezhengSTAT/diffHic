
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This tests the bin square summarization method in diffHic.
> 
> suppressPackageStartupMessages(require(diffHic))
> source("simcounts.R")
> 
> chromos<-c(chrA=50, chrB=100, chrC=80)
> comp <- function(reference, widths) {
+ 	cutted <- simcuts(chromos, min=20, max=200, overlap=4)
+ 	collected <- list()
+ 	for (w in widths) {
+ 		output <- list()
+ 		bindata <- diffHic:::.getBinID(cutted, w)
+ 		n <- round(runif(1, 20, 100))
+ 		all.a <- as.integer(runif(n, 1, length(bindata$region)))
+ 		all.t <- as.integer(runif(n, 1, all.a))
+ 
+ 		output$pairs <- data.frame(anchor.id=all.a, target.id=all.t)
+ 		output$region <- bindata$region
+ 		oname <- paste0("w", w)
+ 		collected[[oname]] <- output
+ 	}	
+ 
+ 	output<- do.call(boxPairs, c(collected, fragments=cutted, reference=reference))
+ 	stopifnot(length(output$indices)==length(widths))
+ 	for (x in 1:length(output$indices)) { 
+ 		curdex <- output$indices[[x]]
+ 		curlist <- collected[[x]]
+ 
+ 		# Checking that each bin pair is truly nested within its reported parent.
+ 		parent.a <- output$region[output$pairs$anchor.id[curdex]]
+ 		parent.t <- output$region[output$pairs$target.id[curdex]]
+ 		
+ 		current.a <- curlist$region[curlist$pairs$anchor.id]
+ 		current.t <- curlist$region[curlist$pairs$target.id]
+ 		
+ 		if (! all(start(parent.a) <= start(current.a) & end(parent.a) >= end(current.a)) ) { stop("anchor ranges not nested in parent") }
+ 		if (! all(start(parent.t) <= start(current.t) & end(parent.t) >= end(current.t)) ) { stop("target ranges not nested in parent") }
+ 	}
+ 
+ 	return(head(output$pairs))
+ }
> 
> set.seed(74653812)
> comp(1000, c(100))
  anchor.id target.id
1         3         2
2         5         2
3         6         1
4         8         7
5        10         7
6        10        10
> comp(1000, c(100, 500))
  anchor.id target.id
1         1         1
2         2         1
3         2         2
4         3         3
5         4         3
6         5         2
> comp(1000, c(500))
  anchor.id target.id
1         1         1
2         2         1
3         3         2
4         4         2
5         4         3
6         5         1
> comp(1000, c(500, 1000))
  anchor.id target.id
1         1         1
2         2         1
3         2         2
4         3         1
5         3         3
6         4         1
> comp(1000, c(100, 500, 1000))
  anchor.id target.id
1         1         1
2         2         1
3         2         2
4         3         1
5         3         2
6         3         3
> 
> comp(150, c(10))
  anchor.id target.id
1         2         1
2         4         3
3         7         5
4        21         3
5        22        11
6        34        19
> comp(150, c(10, 50))
  anchor.id target.id
1         1         1
2         2         1
3         3         1
4         6         2
5         8         2
6        10         8
> comp(150, c(50))
  anchor.id target.id
1         2         1
2         4         1
3        10         5
4        14         2
5        15        13
6        17        13
> comp(150, c(50, 150))
  anchor.id target.id
1         1         1
2         2         1
3         3         1
4         3         2
5         4         2
6         5         2
> comp(150, c(10, 50, 150))
  anchor.id target.id
1         3         1
2         4         1
3         5         4
4         7         2
5         7         6
6         8         6
> 
> comp(500, c(50))
  anchor.id target.id
1         2         1
2         2         2
3         3         1
4         4         1
5         4         2
6         5         2
> comp(500, c(250))
  anchor.id target.id
1         2         1
2         4         3
3         5         1
4         5         3
5         5         4
6         6         4
> comp(500, c(50, 250))
  anchor.id target.id
1         3         1
2         3         2
3         4         1
4         4         2
5         4         4
6         5         1
> 
> ####################################################################################################
> # End.
> 
> proc.time()
   user  system elapsed 
 22.626   0.068  22.723 
