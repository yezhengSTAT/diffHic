
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This tests the interaction counting capabilities of the marginal counter.
> 
> chromos<-c(chrA=51, chrB=31)
> source("simcounts.R")
> 
> # We set up the comparison function to check our results. 
> 
> suppressWarnings(suppressPackageStartupMessages(require(diffHic)))
> dir.create("temp-marg")
> dir1<-"temp-marg/1.h5"
> dir2<-"temp-marg/2.h5"
> 
> comp<-function(n1, n2, dist, cuts, restrict=NULL) {
+ 	simgen(dir1, n1, chromos)
+ 	simgen(dir2, n2, chromos)
+ 	param <- pairParam(fragments=cuts, restrict=restrict)
+ 	y<-squareCounts(c(dir1, dir2), param=param, width=dist, filter=1L)
+ 	frags<-marginCounts(c(dir1, dir2), param=param, width=dist)
+   
+ 	n <- length(regions(y))
+ 	ref <- matrix(0L, n, 2)
+ 	for (x in 1:nrow(y)) {
+ 		a<-y@anchor.id[x]
+ 		t<-y@target.id[x]
+ 		ref[a,]<-ref[a,]+ counts(y)[x,]
+ 		if (a!=t) { ref[t,]<-ref[t,]+counts(y)[x,] }
+ 	}
+ 	
+ 	keep<-which(rowSums(ref)>0.5)
+ 	if (!identical(ref[keep,], counts(frags))) { stop("mismatches in counts") }
+ 	if (!identical(frags$totals, y$totals)) { stop("mismatches in total counts") }
+ 	if (!identical(keep, frags@anchor.id) || !identical(keep, frags@target.id)) { stop("mismatches in the regions to keep") }
+ 	if (!identical(regions(y), regions(frags)))  { stop("mismatches in final regions") }
+ 	return(head(counts(frags)))
+ }
> 
> ###################################################################################################
> # Checking a vanilla count.
> 
> set.seed(126857)
> comp(20, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    9    5
[2,]   10    5
[3,]   10    3
[4,]    7    3
[5,]    7    8
[6,]   11    4
> comp(20, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   12    4
[2,]    9    6
[3,]    8    3
[4,]    7    5
[5,]    7    8
[6,]   10    4
> comp(20, 10, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    6    6
[2,]   15    7
[3,]    9    7
[4,]    9    2
[5,]   12    3
[6,]    6    3
> comp(20, 10, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    8    4
[2,]   10    2
[3,]    9    5
[4,]    4    2
[5,]    3    1
[6,]    4    3
> comp(20, 10, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    7    1
[2,]    1    1
[3,]    7    1
[4,]    5    4
[5,]    3    3
[6,]    7    3
> 
> # Repeating a couple of times.
> comp(10, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    3    1
[2,]    6    6
[3,]    3    3
[4,]    7    8
[5,]    6    6
[6,]    3    4
> comp(10, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    3    4
[2,]    7    7
[3,]    4    5
[4,]    4    3
[5,]    6    7
[6,]    4    2
> comp(10, 10, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    8    7
[2,]    3    6
[3,]    2    1
[4,]    2    6
[5,]    8    5
[6,]    3    5
> comp(10, 10, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    1    2
[2,]    4    4
[3,]    1    4
[4,]    3    2
[5,]    2    1
[6,]    5    0
> comp(10, 10, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    2    1
[2,]    4    1
[3,]    1    3
[4,]    3    1
[5,]    3    0
[6,]    1    4
> 
> comp(10, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    3   14
[2,]    8    7
[3,]    4    7
[4,]    6    7
[5,]    2    9
[6,]    2    6
> comp(10, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    6    8
[2,]    6    3
[3,]    8   11
[4,]    3   10
[5,]    2   12
[6,]    3   13
> comp(10, 20, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    6    9
[2,]    3   13
[3,]    4   11
[4,]    7   12
[5,]    4    6
[6,]    5    6
> comp(10, 20, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    1    5
[2,]    2    4
[3,]    2    5
[4,]    2    2
[5,]    5    6
[6,]    1    5
> comp(10, 20, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    6    1
[2,]    0    5
[3,]    1    7
[4,]    3    2
[5,]    2    2
[6,]    4    5
> 
> ###################################################################################################
> # Another example, a bit more extreme with more overlaps.
> 
> comp(50, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   20    7
[2,]   17    9
[3,]   26    5
[4,]   23   13
[5,]   23   11
[6,]   20    8
> comp(50, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   27   17
[2,]   21    8
[3,]   36   15
[4,]   28    7
[5,]   16    3
[6,]   18    5
> comp(50, 20, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   25    7
[2,]   26    6
[3,]   20    9
[4,]   29   13
[5,]   21   11
[6,]   21   10
> comp(50, 20, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   15    6
[2,]    7    3
[3,]   11    4
[4,]    8    4
[5,]   11    3
[6,]   14    4
> comp(50, 20, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   15    3
[2,]   14    4
[3,]   19    4
[4,]   13    7
[5,]   10    7
[6,]   23    4
> 
> comp(30, 30, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   12   11
[2,]   15   16
[3,]   20   13
[4,]   11   10
[5,]   14   11
[6,]   14   18
> comp(30, 30, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   11   13
[2,]   15   17
[3,]   12   10
[4,]   10   13
[5,]   19   11
[6,]   14   13
> comp(30, 30, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   22    6
[2,]   14   12
[3,]   14   16
[4,]   11   14
[5,]   11   19
[6,]   13   14
> comp(30, 30, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    7   13
[2,]    6    4
[3,]    4    6
[4,]   13    6
[5,]    2    4
[6,]   10    7
> comp(30, 30, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   12    5
[2,]    5    5
[3,]    9    8
[4,]    5    5
[5,]    5    8
[6,]    5    7
> 
> ###################################################################################################
> # Another example which is the pinnacle of extremity.
> 
> comp(200, 100, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   78   53
[2,]  101   49
[3,]  130   55
[4,]   68   39
[5,]   73   37
[6,]  108   46
> comp(200, 100, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   78   51
[2,]   80   41
[3,]  106   57
[4,]   93   33
[5,]   85   35
[6,]   84   47
> comp(200, 100, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]  126   63
[2,]   74   45
[3,]   63   26
[4,]   94   48
[5,]   77   38
[6,]  108   54
> comp(200, 100, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   73   20
[2,]   35   15
[3,]   35   10
[4,]   71   23
[5,]   47   29
[6,]   38   16
> comp(200, 100, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   50   20
[2,]   32   28
[3,]   58   27
[4,]   43   22
[5,]   55   26
[6,]   38   21
> 
> comp(50, 200, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   22   85
[2,]   22  103
[3,]   31   89
[4,]   19   93
[5,]   25   96
[6,]   15   93
> comp(50, 200, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   16   69
[2,]   28   95
[3,]   29   76
[4,]   25  116
[5,]   22   97
[6,]   20   82
> comp(50, 200, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   20   89
[2,]   31   91
[3,]   24  107
[4,]   23   84
[5,]   18   72
[6,]   22  105
> comp(50, 200, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    6   56
[2,]   16   68
[3,]    9   41
[4,]   10   34
[5,]   17   46
[6,]   12   38
> comp(50, 200, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   12   40
[2,]   18   73
[3,]   10   49
[4,]   19   50
[5,]   12   56
[6,]   12   33
> 
> ###################################################################################################
> # Adding some restriction.
> 
> comp(20, 10, dist=10000, cuts=simcuts(chromos), restrict="chrA")
     [,1] [,2]
[1,]    8    4
[2,]    8    3
[3,]    4    3
[4,]    5    4
[5,]    7    2
[6,]    5    2
> comp(20, 10, dist=10000, cuts=simcuts(chromos), restrict="chrB")
     [,1] [,2]
[1,]    6    5
[2,]    7    2
[3,]    9    6
[4,]   11    3
> comp(20, 10, dist=10000, cuts=simcuts(chromos, overlap=4), restrict="chrA")
     [,1] [,2]
[1,]    6    4
[2,]    8    5
[3,]    5    2
[4,]    6    3
[5,]    7    2
[6,]    6    3
> comp(20, 10, dist=5000, cuts=simcuts(chromos), restrict="chrB")
     [,1] [,2]
[1,]    1    1
[2,]    3    2
[3,]    4    4
[4,]    3    1
[5,]    7    3
[6,]   10    2
> 
> ##################################################################################################
> # Cleaning up.
> 
> unlink("temp-marg", recursive=TRUE)
> 
> ##################################################################################################
> # End.
> 
> 
> proc.time()
   user  system elapsed 
 23.264   0.457  23.709 
