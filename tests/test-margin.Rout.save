
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This tests the interaction counting capabilities of the marginal counter.
> 
> chromos<-c(chrA=51, chrB=31)
> source("simcounts.R")
> 
> # We set up the comparison function to check our results. 
> 
> suppressPackageStartupMessages(require(diffHic))
> dir.create("temp-marg")
> dir1<-"temp-marg/1.h5"
> dir2<-"temp-marg/2.h5"
> dir.create(dir1)
> dir.create(dir2)
> 
> comp<-function(n1, n2, dist, cuts, restrict=NULL) {
+ 	simgen(dir1, n1, chromos)
+ 	simgen(dir2, n2, chromos)
+ 	y<-squareCounts(c(dir1, dir2), fragments=cuts, width=dist, filter=1L, restrict=restrict)
+ 	frags<-marginCounts(c(dir1, dir2), fragments=cuts, width=dist, restrict=restrict)
+ 
+ 	n <- length(regions(y))
+ 	ref <- matrix(0L, n, 2)
+ 	for (x in 1:nrow(y)) {
+ 		a<-y@anchor.id[x]
+ 		t<-y@target.id[x]
+ 		ref[a,]<-ref[a,]+ counts(y)[x,]
+ 		if (a!=t) { ref[t,]<-ref[t,]+counts(y)[x,] }
+ 	}
+ 	
+ 	keep<-which(rowSums(ref)>0.5)
+ 	if (!identical(ref[keep,], counts(frags))) { stop("mismatches in counts") }
+ 	if (!identical(totals(frags), totals(y))) { stop("mismatches in total counts") }
+ 	if (!identical(keep, frags@anchor.id) || !identical(keep, frags@target.id)) { stop("mismatches in the regions to keep") }
+ 	if (!identical(regions(y), regions(frags)))  { stop("mismatches in final regions") }
+ 	return(head(counts(frags)))
+ }
> 
> ###################################################################################################
> # Checking a vanilla count.
> 
> set.seed(126857)
> comp(20, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   17   10
[2,]   11    9
[3,]    6    0
[4,]    5    0
[5,]   20    0
[6,]    8    0
> comp(20, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   22    0
[2,]   12    0
[3,]    9   13
[4,]    7    0
[5,]   14    1
[6,]   13    1
> comp(20, 10, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    6    0
[2,]   15    9
[3,]   18    0
[4,]    4    4
[5,]    6    0
[6,]    3    6
> comp(20, 10, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    8    7
[2,]    7    2
[3,]    3    2
[4,]    4    8
[5,]    3    0
[6,]    7    0
> comp(20, 10, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    5    2
[2,]    2    5
[3,]   17    0
[4,]    6    0
[5,]    0    9
[6,]    9    0
> 
> # Repeating a couple of times.
> comp(10, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   10    2
[2,]    8    0
[3,]   12    6
[4,]   13    0
[5,]   16    4
[6,]    7    8
> comp(10, 10, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    0    9
[2,]    4   11
[3,]    5    4
[4,]    5   12
[5,]    9    0
[6,]    2    0
> comp(10, 10, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    0    8
[2,]    3   13
[3,]   14   15
[4,]    7    3
[5,]   12    0
[6,]    5    0
> comp(10, 10, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    8    0
[2,]    0   15
[3,]   15    0
[4,]    1    5
[5,]    6    0
[6,]    0    4
> comp(10, 10, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    8    0
[2,]    3    0
[3,]    5    7
[4,]    0    4
[5,]   21   14
[6,]    8    0
> 
> comp(10, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    2   10
[2,]    7    5
[3,]    6    0
[4,]    0   17
[5,]   16   10
[6,]    0    5
> comp(10, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    0   18
[2,]   17    4
[3,]   17   13
[4,]    7    7
[5,]    2   17
[6,]    7    6
> comp(10, 20, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   18   27
[2,]    9   12
[3,]    0   10
[4,]    8   21
[5,]    0    2
[6,]    9   11
> comp(10, 20, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    1    0
[2,]   13   16
[3,]   16   39
[4,]    0    7
[5,]    7    7
[6,]    6    0
> comp(10, 20, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    0   20
[2,]    9   19
[3,]    9    3
[4,]   16   15
[5,]   14    0
[6,]    4    8
> 
> ###################################################################################################
> # Another example, a bit more extreme with more overlaps.
> 
> comp(50, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   21   11
[2,]    7    9
[3,]    4    9
[4,]    7    1
[5,]   53    6
[6,]   43    0
> comp(50, 20, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   11    0
[2,]   27    0
[3,]   12    7
[4,]   21   22
[5,]   13   21
[6,]   24   14
> comp(50, 20, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   16   29
[2,]   17    4
[3,]    4    7
[4,]   41    6
[5,]    1    7
[6,]   40   12
> comp(50, 20, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   15    0
[2,]   17    0
[3,]   64    6
[4,]    5    3
[5,]   38    2
[6,]   28    0
> comp(50, 20, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   10    0
[2,]   18    0
[3,]   13    8
[4,]   23    9
[5,]   10   24
[6,]   11    2
> 
> comp(30, 30, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   11   13
[2,]    9   27
[3,]    4   13
[4,]    6    9
[5,]   13    7
[6,]   41   20
> comp(30, 30, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    9   16
[2,]   27   44
[3,]    8    0
[4,]   13   15
[5,]   10   26
[6,]    0   10
> comp(30, 30, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]    6   30
[2,]   13   14
[3,]   18   34
[4,]    9   15
[5,]    6   11
[6,]    9   31
> comp(30, 30, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]    4    2
[2,]   18   12
[3,]    0   19
[4,]    6    6
[5,]    7    1
[6,]   27   11
> comp(30, 30, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   21   21
[2,]    0    7
[3,]   22   13
[4,]    0   12
[5,]    1   12
[6,]    6    9
> 
> ###################################################################################################
> # Another example which is the pinnacle of extremity.
> 
> comp(200, 100, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]  223   76
[2,]  121   27
[3,]   66   56
[4,]  170   38
[5,]  103   54
[6,]  117  115
> comp(200, 100, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]  146   39
[2,]  144   76
[3,]   88   28
[4,]   50   14
[5,]   60   14
[6,]  119  102
> comp(200, 100, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   71   14
[2,]  125   49
[3,]  228   68
[4,]  105   55
[5,]  132   53
[6,]   58   12
> comp(200, 100, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]  114   74
[2,]   41   29
[3,]   35   50
[4,]   68   37
[5,]   20   16
[6,]   48   24
> comp(200, 100, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   76   36
[2,]   45   18
[3,]  113   85
[4,]   47   46
[5,]   85   23
[6,]   49   13
> 
> comp(50, 200, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   22  149
[2,]   30  171
[3,]   20   45
[4,]   66  105
[5,]   28   72
[6,]   36  111
> comp(50, 200, dist=10000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   52  148
[2,]    8   33
[3,]   44  181
[4,]   16  124
[5,]    7   63
[6,]   48  178
> comp(50, 200, dist=10000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   29   28
[2,]    2   41
[3,]   19  229
[4,]   23   58
[5,]   20   84
[6,]   14  146
> comp(50, 200, dist=5000, cuts=simcuts(chromos))
     [,1] [,2]
[1,]   29   47
[2,]    9   57
[3,]   33   54
[4,]   19   61
[5,]   13   75
[6,]   54   82
> comp(50, 200, dist=5000, cuts=simcuts(chromos, overlap=4))
     [,1] [,2]
[1,]   23   56
[2,]   24   48
[3,]   13   69
[4,]    9   62
[5,]   19   30
[6,]   10   36
> 
> ###################################################################################################
> # Adding some restriction.
> 
> comp(20, 10, dist=10000, cuts=simcuts(chromos), restrict="chrA")
     [,1] [,2]
[1,]    8    0
[2,]   16    0
[3,]    1    3
[4,]    0    9
[5,]    0    5
[6,]    0    8
> comp(20, 10, dist=10000, cuts=simcuts(chromos), restrict="chrB")
     [,1] [,2]
[1,]    0    5
[2,]   14    9
[3,]    8    1
[4,]    6   24
[5,]    4    0
[6,]   14    1
> comp(20, 10, dist=10000, cuts=simcuts(chromos, overlap=4), restrict="chrA")
     [,1] [,2]
[1,]    7    1
[2,]   13    0
[3,]    6    3
[4,]   12   10
[5,]   16    9
[6,]    1    0
> comp(20, 10, dist=5000, cuts=simcuts(chromos), restrict="chrB")
     [,1] [,2]
[1,]    2    0
[2,]    9    9
[3,]    3    3
[4,]   23    0
[5,]    2    0
[6,]    0    2
> 
> ##################################################################################################
> # Cleaning up.
> 
> unlink("temp-marg", recursive=TRUE)
> 
> ##################################################################################################
> # End.
> 
> 
> proc.time()
   user  system elapsed 
 32.780   0.334  33.224 
