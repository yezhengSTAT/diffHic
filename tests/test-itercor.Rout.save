
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ####################################################################################################
> # Tests the iterative correction script.
> 
> suppressPackageStartupMessages(require(diffHic))
> suppressPackageStartupMessages(require(edgeR))
> 	
> comp<- function(npairs, nfrags, nlibs, lambda=5, dispersion=0.05, winsorize=0.02, discard=0.02, locality=1) {
+ 	all.pairs <- rbind(t(combn(nfrags, 2)), cbind(1:nfrags, 1:nfrags))
+ 	all.pairs <- data.frame(anchor.id=all.pairs[,2], target.id=all.pairs[,1])	
+ 	npairs <- min(npairs, nrow(all.pairs))
+ 	counts <- do.call(cbind, lapply(1:nlibs, FUN=function(x) { rpois(npairs, lambda) }) )
+ 	chosen <- sample(nrow(all.pairs), npairs)
+ 	data <- diffHic:::.DIList(counts=counts, anchors=all.pairs$anchor.id[chosen], 
+ 		targets=all.pairs$target.id[chosen], totals=rep(1, nlibs), 
+ 		region=GRanges(sort(sample(c("chrA", "chrB", "chrC"), nfrags, replace=TRUE)),
+ 			IRanges(1:nfrags, 1:nfrags)))
+ 	
+ 	# Constructing the values.	
+ 	actual.mat<-matrix(0, nfrags, nfrags)
+ 	is.filled <- matrix(FALSE, nfrags, nfrags)
+ 	ave.count <- exp(mglmOneGroup(counts, offset=numeric(nlibs), dispersion=dispersion))
+ 	for (x in 1:nrow(data)) { 
+ 		if (ave.count[x] < 1e-6) { next } # As zeros get removed.
+ 		a<-data@anchor.id[x]
+ 		t<-data@target.id[x]
+ 		actual.mat[a,t] <- ave.count[x]
+ 		is.filled[a,t] <- TRUE
+ 		if (a!=t) { 
+ 			actual.mat[t,a] <- ave.count[x] 
+ 			is.filled[t,a] <- TRUE
+ 		}
+ 	}
+ 
+ 	# Negating local interations.
+ 	if (locality >= 0L){
+  		per.chr <- split(1:nfrags, as.integer(seqnames(regions(data))))
+ 		for (curloc in 0:locality) {
+ 			failed <- 0L
+ 			for (chr in per.chr) {
+ 				if (length(chr)<=curloc) { 
+ 					failed <- failed + 1L
+ 					next 
+ 				}
+ 				current <- chr[1:(length(chr) - curloc)]
+ 				deleted <- (current - 1) * nfrags + current + curloc
+ 				actual.mat[deleted] <- 0
+ 				is.filled[deleted] <- FALSE
+ 				
+ 				deleted <- (current + curloc - 1) * nfrags + current
+ 				actual.mat[deleted] <- 0
+ 				is.filled[deleted] <- FALSE
+ 			}
+ 			if (failed==length(per.chr)) { break }
+ 		}		
+ 	}
+ 	
+ 	# Winsorizing.
+ 	temp.mat <- actual.mat[lower.tri(actual.mat, diag=TRUE)]
+ 	is.nonzero <- temp.mat>1e-6
+ 	winsor.val <- max(temp.mat[is.nonzero][sum(is.nonzero) - rank(temp.mat[is.nonzero], ties="first") + 1L > sum(is.nonzero)*winsorize])
+ 	actual.mat[actual.mat > winsor.val] <- winsor.val
+ 
+ 	# Running the reference, and checking that the right number of low fragments are removed.
+ 	# Can't do it directly, because sorting might not be consistent between R and C++.
+ 	iters <- 50
+ 	test <- correctedContact(data, dispersion=dispersion, winsor=winsorize, ignore=discard, 
+ 			iterations=iters, exclude.local=locality)
+ 	to.discard <- is.na(test$bias)
+ 	frag.sum <- rowSums(actual.mat) 
+ 	nempty.frags <- rowSums(is.filled) > 0L
+ 	gap <- sum(to.discard & nempty.frags) - sum(nempty.frags) * discard
+ 	if (gap >= 1e-6 || gap < -1 - 1e-6) { stop("number discarded is not consistent with that requested") }
+ 	if (any(to.discard)) { stopifnot(max(frag.sum[to.discard]) <= min(frag.sum[!to.discard]) + 1e-6) }
+ 
+ 	# Discarding those that have a low sum of counts.
+ 	actual.mat[to.discard,] <- 0
+ 	actual.mat[,to.discard] <- 0
+ 
+ 	# Iterative correction.
+ 	bias<-rep(1, nfrags)
+ 	for (i in 1:iters) {
+ 		additional<-sqrt(rowSums(actual.mat))
+ 		bias <- bias*additional
+ 		additional[additional==0]<-1
+ 		actual.mat<-t(t(actual.mat/additional)/additional)
+ 	}
+ 	
+ 	# Comparing to the reference implementation. We use a fairly gentle threshold for differences,
+ 	# due to the iterative nature of things (and numerical instability and so forth).
+ 	is.okay <- !to.discard
+ 	if (any(abs(test$bias[is.okay]-bias[is.okay]) > 1e-6 * bias[is.okay])) { stop("biases do not match up") }
+ 	return(head(bias))
+ }
> 
> ####################################################################################################
> 
> set.seed(0)
> 
> # Varying the number of fragments.
> 
> comp(100, 20, 2, discard=0.1)
[1] 7.813272 5.347016 6.181024 8.685731 5.826509 4.199876
> comp(100, 30, 2, discard=0.1)
[1] 4.013492 6.226160 1.611982 3.049236 2.882078 9.777466
> comp(100, 40, 2, discard=0.1)
[1]  9.786780  5.841569  0.000000  5.685359 18.661550 16.343933
> 
> comp(100, 20, 2, winsor=0.05)
[1] 8.383543 5.452926 5.559315 7.247630 4.805950 5.772721
> comp(100, 30, 2, winsor=0.1)
[1] 5.268116 4.754215 3.673490 5.445064 6.863991 2.038106
> comp(100, 40, 2, winsor=0.01)
[1] 6.986111 9.260285 3.426229 8.096523 7.684961 4.435958
> 
> comp(100, 20, 2, locality=0)
[1]  9.667395 10.837108  4.354857  5.597683  7.915360  3.923185
> comp(100, 30, 2, locality=2)
[1] 6.194339 1.281146 7.651065 5.563324 6.186270 4.996005
> comp(100, 40, 2, locality=1)
[1]  1.1331809 17.3266384 54.6571866  6.2051346  0.6996807  0.9124576
> 
> # Trying with fewer reads.
> 
> #debug(comp)
> comp(10, 20, 2, discard=0.1)
[1]  0.000000  2.746272 21.224267  0.000000 23.746718  0.000000
> comp(10, 30, 2, discard=0.1)
[1] 1.5811388 2.0000000 0.4805629 2.6457513 9.5485333 0.6055837
> comp(10, 40, 2, discard=0.1)
[1] 0.0005053866 0.0000000000 2.7386127875 0.0000000000 2.3452078799
[6] 0.0000000000
> 
> comp(20, 20, 2, winsor=0.05)
[1] 0.000000e+00 5.644345e+04 5.090135e+02 7.202059e-03 5.711308e+00
[6] 9.264142e-01
> comp(20, 30, 2, winsor=0.1)
[1]   0.01252936   0.00000000 231.95311402   0.00000000   0.00000000
[6]   0.00000000
> comp(20, 40, 2, winsor=0.01)
[1] 0.5066953277 0.0002404447 0.1189109021 0.0000000000 0.0000000000
[6] 0.0000000000
> 
> comp(10, 20, 2, locality=0)
[1]  0.028824313  0.000000000  0.000000000  0.009182929  0.329350218
[6] 12.394113537
> comp(10, 30, 2, locality=2)
[1]     0.00     0.00     0.00 49817.84     0.00     0.00
> comp(10, 40, 2, locality=1)
[1] 0.000000e+00 0.000000e+00 6.305433e-04 2.121320e+00 2.449490e+00
[6] 3.409101e-06
> 
> # Trying with fewer libraries.
> 
> comp(50, 20, 1, discard=0.1)
[1]  5.708114  2.368048 10.124373  2.529899  0.000000  4.722286
> comp(50, 30, 1, discard=0.1)
[1] 31.1916332 10.7246189  0.8306957  1.5913334  0.0000000  0.1729318
> comp(50, 40, 1, discard=0.1)
[1] 2.256094e+02 7.384505e-03 4.379973e-04 8.073616e+02 0.000000e+00
[6] 1.194783e+01
> 
> comp(50, 20, 1, winsor=0.05)
[1] 114.9524556  16.1045853  37.0447941  26.1776827   0.2810826   2.2554009
> comp(50, 30, 1, winsor=0.1)
[1]  6.2907708  6.2305394 32.5067882  0.4609997  3.9356460  0.2733419
> comp(50, 40, 1, winsor=0.01)
[1] 2.82842712 2.24068137 0.05515717 0.24234851 4.82464795 7.05009318
> 
> comp(50, 20, 1, locality=0)
[1]  2.3210231  1.9198245  7.9931168  0.1812707  2.6661748 21.1712326
> comp(50, 30, 1, locality=2)
[1] 0.01783651 0.06920843 6.13266295 0.18909556 0.00432887 8.32852733
> comp(50, 40, 1, locality=1)
[1] 9.266132e-02 0.000000e+00 0.000000e+00 5.745999e+00 2.744924e-01
[6] 2.278750e+03
> 
> # Trying with no special attention.
> comp(50, 20, 1, discard=0, winsor=0, locality=-1)
[1] 14.785235  1.315092  6.763417 11.012796  7.758946  4.203576
> comp(50, 50, 1, discard=0, winsor=0, locality=-1)
[1] 1.945631e-05 1.966686e+01 2.732566e-04 0.000000e+00 6.076916e-05
[6] 6.514706e+00
> comp(50, 20, 2, discard=0, winsor=0, locality=-1)
[1] 6.769012 2.291995 2.505494 6.310373 3.699439 6.502240
> comp(50, 20, 2, discard=0, winsor=0, locality=1000)
[1] 10.195305  2.220565 10.871631 10.509848  5.077755  3.727807
> comp(100, 20, 2, discard=0, winsor=0, locality=1000)
[1] 12.557258  5.706341  7.467032 17.813971  3.860906  3.261400
> 
> ####################################################################################################
> # End.
> 
> proc.time()
   user  system elapsed 
  5.860   0.048   5.913 
