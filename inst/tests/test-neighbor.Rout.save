
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################################################################
> # This tests the neighbor-counting code.
> 
> suppressWarnings(suppressPackageStartupMessages(require(diffHic)))
> suppressPackageStartupMessages(require(edgeR))
> 
> # Defining some odds and ends.
> 
> lower.left <- function(x, exclude=0) { 
+ 	out <- matrix(TRUE, nrow=nrow(x), ncol=ncol(x))
+ 	out[nrow(x)+(-exclude):0,1:(1+exclude)] <- FALSE
+ 	out
+ }
> 
> all.but.middle <- function(x, exclude=0) {
+ 	out <- matrix(TRUE, nrow=nrow(x), ncol=ncol(x))
+ 	midrow <- ceiling(nrow(x)/2) + (-exclude):exclude
+ 	midrow <- midrow[midrow > 0 & midrow <= nrow(x)]
+ 	midcol <- ceiling(ncol(x)/2) + (-exclude):exclude
+ 	midcol <- midcol[midcol > 0 & midcol <= ncol(x)]
+ 	out[midrow, midcol] <- FALSE
+ 	out
+ }
> 
> comp <- function(npairs, chromos, flanking, exclude=0, prior=2) {
+ 	flanking <- as.integer(flanking)
+ 	exclude <- as.integer(exclude)
+ 
+ 	nlibs <- 4L
+ 	lambda <- 5
+ 	nbins <- sum(chromos)
+ 	all.pairs <- rbind(t(combn(nbins, 2)), cbind(1:nbins, 1:nbins))
+ 	aid <- pmax(all.pairs[,1], all.pairs[,2])
+ 	tid <- pmin(all.pairs[,1], all.pairs[,2])
+    	npairs <- min(npairs, nrow(all.pairs))
+ 
+ 	# Setting up some data.
+ 	counts <- do.call(cbind, lapply(1:nlibs, FUN=function(x) { as.integer(rpois(npairs, lambda) + 1) }) )
+ 	chosen <- sample(nrow(all.pairs), npairs)
+ 	indices <- unlist(sapply(chromos, FUN=function(x) { 1:x }), use.names=FALSE)
+ 	data <- DIList(counts=counts, anchors=aid[chosen], targets=tid[chosen],
+ 		totals=rep(1e6, nlibs), regions=GRanges(rep(names(chromos), chromos), IRanges(indices, indices)))
+ 	data@regions$nfrags <- rep(1:3, length.out=nbins)
+ 	
+ 	# Computing the reference enrichment value.
+ 	bg <- enrichedPairs(data, flank=flanking, prior.count=prior, exclude=exclude)
+ 	final.ref <- numeric(length(bg))
+ 
+ 	# Sorting them by chromosome pairs.
+ 	all.chrs <- as.character(seqnames(regions(data)))
+ 	chr.pair <- paste0(all.chrs[data@anchors], ".", all.chrs[data@targets])
+ 	by.chr.pair <- split(1:npairs, chr.pair)
+ 	first.id <- lapply(split(1:nbins, all.chrs), FUN=min)
+ 
+ 	for (cpair in names(by.chr.pair)) { 
+ 		cur.pairs <- by.chr.pair[[cpair]]
+ 		two.chrs <- strsplit(cpair, "\\.")[[1]]
+ 		current <- data[cur.pairs,]
+ 		rel.ab <- 2^(aveLogCPM(counts(current), lib.size=current$totals, prior.count=0) 
+ 			+ log2(mean(current$totals)/1e6))
+ 
+ 		# Setting up the interaction space.
+ 		a.dex <- anchors(current, id=TRUE) - first.id[[two.chrs[1]]] + 1L
+ 		t.dex <- targets(current, id=TRUE) - first.id[[two.chrs[2]]] + 1L
+ 		alen <- chromos[[two.chrs[1]]]
+ 		tlen <- chromos[[two.chrs[2]]]
+ 		inter.space <- matrix(0L, nrow=alen, ncol=tlen)
+ 		inter.space[(t.dex-1)*alen + a.dex] <- 1:nrow(current) # column major.
+ 		valid <- matrix(TRUE, nrow=alen, ncol=tlen)
+ 		
+ 		# Checking if we're working on the same chromosome.
+ 		if (two.chrs[1]==two.chrs[2]) { 
+ 			valid[upper.tri(valid)] <- FALSE 
+ 			starting.dex <- 1L
+ 		} else {
+ 			starting.dex <- 2L
+ 		}
+ 
+ 		output <- numeric(nrow(current))
+ 		for (pair in 1:nrow(current)) {
+ 			total.num <- 4L
+ 			collected <- numeric(total.num)
+ 			collected.n <- numeric(total.num)
+ 			ax <- a.dex[pair]
+ 			tx <- t.dex[pair]
+ 
+ 			for (quad in starting.dex:total.num) {
+ 				if (quad==1L) {
+ 					cur.a <- ax - flanking:0
+ 					cur.t <- tx + 0:flanking
+ 					keep <- lower.left 
+ 				} else if (quad==2L) {
+ 					cur.a <- ax + (-flanking):flanking
+ 					cur.t <- tx
+ 					keep <- all.but.middle
+ 				} else if (quad==3L) {
+ 					cur.a <- ax
+ 					cur.t <- tx + (-flanking):flanking
+ 					keep <- all.but.middle
+ 				} else if (quad==4L) {
+ 					cur.a <- ax + (-flanking):flanking
+ 					cur.t <- tx + (-flanking):flanking
+ 					keep <- all.but.middle
+ 				}
+ 	
+ 				# Selecting the relevant entries for the chosen quadrant.
+ 				indices <- outer(cur.a, cur.t, FUN=function(x, y) { 
+ 					out <- (y-1)*alen + x
+ 					out[x > alen | x < 1 | y > tlen | y < 1] <- -1
+ 					return(out)
+ 				})
+ 				indices <- indices[keep(indices, exclude)]
+ 				indices <- indices[indices > 0]
+ 				indices <- indices[valid[indices]]
+ 
+ 				# Computing the average across this quadrant.
+ 				relevant.rows <- inter.space[indices]
+ 				is.zero <- relevant.rows==0L			
+ 				collected[quad] <- sum(rel.ab[relevant.rows[!is.zero]])/length(relevant.rows)
+ 				collected.n[quad] <- length(relevant.rows)
+ 			}
+ 
+ #			if (exclude) { # Troubleshooting.
+ #				print(c(aid[pair], tid[pair]))
+ #				print(collected)
+ #				print(collected.n)
+ #			}
+ 		
+ 			output[pair] <- log2((rel.ab[pair]+prior)/(max(collected, na.rm=TRUE)+prior))
+ 		}
+ 		final.ref[cur.pairs] <- output
+ 	}
+ 
+ 	if (any(abs(bg-final.ref) > (0.001+abs(bg))*1e-6)) { stop("mismatch in relative enrichment values") }
+ 	return(head(bg))
+ }
> 
> ###################################################################################################
> # Simulating.
> 
> set.seed(3427675)
> comp(10, c(chrA=10), 5)
[1] 0.7155466 1.0155969 0.6863395 1.1037479 0.9447176 0.9475326
> comp(100, c(chrA=10, chrB=30, chrC=20), 5)
[1] 1.603110 1.431157 1.858204 1.393481 1.354957 2.057898
> comp(100, c(chrA=10, chrC=20), 5)
[1] 1.1575413 0.7058169 1.5849625 1.4152845 0.8624965 0.8744691
> comp(100, c(chrA=10, chrB=5, chrC=20), 5)
[1] 0.8845228 1.2531189 1.2334901 1.1686818 0.9429691 1.0000000
> comp(100, c(chrA=20, chrB=5), 5)
[1] 1.2527661 0.9315203 0.0000000 0.8780095 0.4918531 0.6951454
> 
> comp(100, c(chrA=10, chrB=30, chrC=20), 10)
[1] 1.522678 1.845812 1.767496 1.335867 1.802672 1.375509
> comp(100, c(chrA=10, chrC=20), 10)
[1] 0.1666499 1.5114458 1.1546965 1.4118136 1.0223678 0.9434165
> comp(100, c(chrA=10, chrB=5, chrC=20), 10)
[1] 1.6424480 1.7163472 1.4806258 0.6611981 1.1089344 1.4199530
> comp(100, c(chrA=20, chrB=10), 10)
[1]  0.3468028  1.4949588  1.7647219 -0.1663584  0.8091777  1.1527703
> 
> comp(200, c(chrA=10, chrB=30, chrC=20), 3)
[1] 1.567827 1.687532 1.766801 1.479610 1.439532 1.440779
> comp(200, c(chrA=10, chrC=20), 3)
[1]  0.2630344  1.0109711 -0.3514724  0.1500254  0.6355886  0.3699496
> comp(200, c(chrA=10, chrB=5, chrC=20), 3)
[1] 0.7097441 0.8069097 0.4999264 0.5478095 0.3677318 1.0443941
> comp(200, c(chrA=20, chrB=3), 3)
[1]  0.14684139  0.14684139 -0.06413034  0.86875547  0.27573087 -0.16349873
> 
> comp(200, c(chrA=10, chrB=30, chrC=20), 1)
[1]  1.8579810  2.1699250 -0.3312059  1.2374993  1.1375035  0.5849625
> comp(200, c(chrA=10, chrC=20), 1)
[1]  0.9240511  0.3439544  1.0000000  0.2247063  0.8123730 -0.1876270
> comp(200, c(chrA=10, chrB=5, chrC=20), 1)
[1] -0.12553088 -0.09953567  0.14201900  1.75424359  0.71459778  1.14684139
> comp(200, c(chrA=20, chrB=5), 1)
[1] -0.11150832 -0.49642583  0.08572987 -0.02106162 -0.36564947  0.99297957
> 
> comp(200, c(chrA=10, chrB=30, chrC=20), 3, exclude=1)
[1] -0.03394733  1.53115606  1.09019781  1.51255401 -0.32192809  0.47846288
> comp(200, c(chrA=10, chrC=20), 3, exclude=1)
[1] 0.9177729 1.4823928 0.6076826 0.6100535 0.4639471 0.9855004
> comp(200, c(chrA=10, chrB=5, chrC=20), 3, exclude=1)
[1]  1.1803590 -0.3870231  1.3440294  1.4636562  1.0533811  0.8349408
> comp(200, c(chrA=20, chrB=5), 3, exclude=1)
[1]  0.49749966  0.64114534 -0.04439412 -0.07275634  0.18737014  0.46174548
> 
> ###################################################################################################
> # Same sort of simulation, but direct from read data, for neighbourCounts testing.
> 
> chromos<-c(chrA=51, chrB=31)
> source("simcounts.R")
> 
> dir.create("temp-neighbor")
> dir1<-"temp-neighbor/1.h5"
> dir2<-"temp-neighbor/2.h5"
> 
> comp2 <- function(npairs1, npairs2, width, cuts, filter=1, flank=5, exclude=0, prior.count=2) {
+ 	simgen(dir1, npairs1, chromos)
+ 	simgen(dir2, npairs2, chromos)
+ 	param <- pairParam(fragments=cuts)
+ 
+ 	out <- neighbourCounts(c(dir1, dir2), param, width=width, filter=filter, flank=flank, prior.count=prior.count, 
+ 		exclude=exclude)
+ 
+ 	ref <- squareCounts(c(dir1, dir2), width=width, param, filter=1)
+ 	keep <- rowSums(counts(ref)) >= filter
+ 	enrichment <- enrichedPairs(ref, flank=flank, prior.count=prior.count, exclude=exclude)
+ 
+ 	if (!identical(ref[keep,], out$interaction)) { stop("extracted counts don't match up") }
+ 	if (any(abs(enrichment[keep] - out$enrichment) > 1e-6)) { stop("enrichment values don't match up") }
+ 	return(head(enrichment[keep]))
+ }
> 
> set.seed(2384)
> comp2(100, 50, 10000, cuts=simcuts(chromos))
[1] -0.53942058  0.05566542 -0.98421213 -0.08485202 -0.21387570 -0.97916725
> comp2(100, 50, 10000, cuts=simcuts(chromos), filter=10)
[1] 0.2853725 0.3376211 0.3529720 0.2174724 0.3709576 0.2174724
> comp2(100, 50, 10000, cuts=simcuts(chromos), flank=3)
[1] -0.3074373  0.3531941 -0.9166039 -0.1067788  0.2037269 -1.2010494
> comp2(100, 50, 10000, cuts=simcuts(chromos), prior.count=1)
[1] -0.6915537  0.5634763 -0.5634762 -0.1251084 -0.2994913 -0.2429704
> 
> comp2(50, 200, 5000, cuts=simcuts(chromos))
[1]  0.535850580 -0.761718010  0.032986357  0.001033872 -0.379678473
[6] -0.470316507
> comp2(50, 200, 5000, cuts=simcuts(chromos), filter=10)
[1] 0.9680413 0.9672167 0.6700266 0.2949188 0.2871594 0.4454393
> comp2(50, 200, 5000, cuts=simcuts(chromos), flank=3)
[1] -0.56670245  0.16194906 -0.25694679 -0.03389262 -0.22118535  0.46852242
> comp2(50, 200, 5000, cuts=simcuts(chromos), prior.count=1)
[1] -1.05623987  0.18676914 -0.78749408 -0.34528297 -0.01239711  0.02468858
> 
> comp2(100, 200, 1000, cuts=simcuts(chromos))
[1] 0.2394428 0.2226192 0.2054902 0.2205634 0.2380906 0.2333634
> comp2(100, 200, 1000, cuts=simcuts(chromos), filter=5)
[1] 0.8976907
> comp2(100, 200, 1000, cuts=simcuts(chromos), flank=3)
[1] 0.5665827 0.2319725 0.1872252 0.2093078 0.1814237 0.2522411
> comp2(100, 200, 1000, cuts=simcuts(chromos), prior.count=1)
[1] 0.164380552 0.722338347 0.299500344 0.005164271 0.528635697 0.003932588
> 
> comp2(10, 20, 1000, cuts=simcuts(chromos))
[1] 0.3134744 0.2492235 0.2747375 0.3211366 0.3094545 0.3218073
> comp2(10, 20, 1000, cuts=simcuts(chromos), filter=5)
numeric(0)
> comp2(10, 20, 1000, cuts=simcuts(chromos), flank=3)
[1] 0.3250946 0.3129133 0.3053756 0.3176405 0.3250946 0.2617857
> comp2(10, 20, 1000, cuts=simcuts(chromos), prior.count=1)
[1] 0.5556565 0.5494439 0.5123425 0.5123425 0.5659609 0.5620062
> 
> comp2(10, 20, 1000, cuts=simcuts(chromos), exclude=1)
[1] 0.2333634 0.2617857 0.3156551 0.3203674 0.3071017 0.2802203
> comp2(50, 20, 1000, cuts=simcuts(chromos), exclude=1)
[1] 0.2393575 0.2314517 0.2759848 0.2487711 0.2332494 0.2502265
> comp2(100, 50, 1000, cuts=simcuts(chromos), exclude=2)
[1] 0.2782308 0.3050583 0.5465546 0.2617857 0.2036715 0.1560364
> comp2(50, 200, 1000, cuts=simcuts(chromos), exclude=2)
[1] 0.09905107 0.26167813 0.26713529 0.26081098 0.15124940 0.24708803
> 
> #####################################################################################################
> # Cleaning up
> 
> unlink("temp-neighbor", recursive=TRUE)
> 
> #####################################################################################################
> # End.
> 
> 
> 
> proc.time()
   user  system elapsed 
 12.418   0.362  12.783 
